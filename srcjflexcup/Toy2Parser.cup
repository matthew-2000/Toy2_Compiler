import nodes.*;
import visitor.utils.*;
import nodes.stat.*;
import nodes.expr.*;
import visitor.Visitable;
import java.util.*;
import java_cup.runtime.Symbol;

// Sezione per il codice personalizzato del parser
parser code {:
    // Sovrascrive il metodo syntax_error per migliorare la gestione degli errori
    public void syntax_error(Symbol cur_token) {
        // Prendi la linea e la colonna dell'errore dal simbolo corrente
        int line = cur_token.left; // posizione della linea dell'errore
        int column = cur_token.right; // posizione della colonna

        // Mostra un messaggio dettagliato
        System.err.println("Errore di sintassi! Token non atteso: " + cur_token.value);
        System.err.println("Posizione dell'errore: linea " + line + ", colonna " + column);

        // Informazioni aggiuntive sul tipo del token
        System.err.println("Dettagli del token: tipo " + cur_token.sym + ", valore: " + cur_token.value);
    }

    // Sovrascrive il metodo report_error per messaggi personalizzati in caso di errore generico
    public void report_error(String message, Object info) {
        System.err.println("Errore di parsing: " + message);
        if (info instanceof Symbol) {
            Symbol symbol = (Symbol) info;
            System.err.println("Posizione dell'errore: linea " + symbol.left + ", colonna " + symbol.right);
        }
    }
:};

/* Dichiarazione dei terminali */
terminal VAR, PROC, FUNC, ENDVAR, ENDPROC, ENDFUNC, RETURN, IF, THEN, ELSE, ELIF, ENDIF, WHILE, DO, ENDWHILE;
terminal WRITE, WRITERETURN, READ, TRUE, FALSE;
terminal REAL, INTEGER, STRING, BOOLEAN, LPAR, RPAR, SEMI, COMMA, COLON, ASSIGN, REF, DOLLAR;
terminal PLUS, MINUS, UMINUS, TIMES, DIV, EQ, NE, LT, LE, GT, GE, AND, OR, NOT;
terminal REAL_CONST, NUMBER_LITERAL, STRING_LITERAL;
terminal IDENTIFIER;
terminal TYPERETURN;
terminal OUT;

/* Dichiarazione dei non terminali */
non terminal Program, Iter, Iters, ItersWithoutProcedure, IterWithoutProcedure, VarDecl, Decls, Ids, Consts, Const, Type;
non terminal Function, FuncParams, OtherFuncParams, Types;
non terminal Procedure, ProcParams, OtherProcParams, ProcParamId;
non terminal Body, Stat, FunCall, ProcCall, IfStat, Elifs, Elif, Else, WhileStat;
non terminal IOArg, IOArgsList, ProcExprs, Exprs, Expr;

/* Definizione delle precedenze degli operatori */
precedence left OR;
precedence left AND;
precedence right NOT;
precedence nonassoc EQ, NE, LT, LE, GT, GE;
precedence right UMINUS;
precedence left PLUS, MINUS;
precedence left TIMES, DIV;

/* Definizione del Programma principale */
Program ::= ItersWithoutProcedure:itersWithoutProcedure Procedure:proc Iters:iters
{:
    // Esegui il cast ai rispettivi tipi di nodo per evitare errori di tipo
    ProgramNode programNode = new ProgramNode(
        (ItersWithoutProcedureNode) itersWithoutProcedure,
        (ProcedureNode) proc,
        (ItersNode) iters
    );
    RESULT = programNode;
:};

/* Lista di dichiarazioni top-level senza Procedure */
ItersWithoutProcedure ::= /* empty */
{:
    // Crea una nuova lista vuota di IterWithoutProcedureNode
    List<IterWithoutProcedureNode> iterList = new ArrayList<>();
    ItersWithoutProcedureNode itersWithoutProcedureNode = new ItersWithoutProcedureNode(iterList);
    RESULT = itersWithoutProcedureNode;
:}
| ItersWithoutProcedure:itersWithoutProcedure IterWithoutProcedure:iterWithoutProcedure
{:
    // Aggiungi l'iterWithoutProcedure alla lista
    ItersWithoutProcedureNode itersWithoutProcedureNode = (ItersWithoutProcedureNode) itersWithoutProcedure;
    itersWithoutProcedureNode.addIter((IterWithoutProcedureNode) iterWithoutProcedure);
    RESULT = itersWithoutProcedureNode;
:};

/* Definizione di una dichiarazione top-level senza Procedure */
IterWithoutProcedure ::= VarDecl:varDecl
{:
    IterWithoutProcedureNode iterWithoutProcedureNode = new IterWithoutProcedureNode((VarDeclNode) varDecl);
    RESULT = iterWithoutProcedureNode;
:}
| Function:function
{:
    IterWithoutProcedureNode iterWithoutProcedureNode = new IterWithoutProcedureNode((FunctionNode) function);
    RESULT = iterWithoutProcedureNode;
:};

/* Lista di dichiarazioni top-level (pu√≤ includere Procedure) */
Iters ::= /* empty */
{:
    // Crea una nuova lista vuota di IterNode
    List<IterNode> iterList = new ArrayList<>();
    ItersNode itersNode = new ItersNode(iterList);
    RESULT = itersNode;
:}
| Iters:iters Iter:iter
{:
    // Aggiungi l'iter alla lista
    ItersNode itersNode = (ItersNode) iters;
    itersNode.addIter((IterNode) iter);
    RESULT = itersNode;
:};

/* Definizione di una dichiarazione top-level */
Iter ::= VarDecl:varDecl
{:
    IterNode iterNode = new IterNode((VarDeclNode) varDecl);
    RESULT = iterNode;
:}
| Function:function
{:
    IterNode iterNode = new IterNode((FunctionNode) function);
    RESULT = iterNode;
:}
| Procedure:procedure
{:
    IterNode iterNode = new IterNode((ProcedureNode) procedure);
    RESULT = iterNode;
:};

/* Dichiarazione di variabili */
VarDecl ::= VAR Decls:decls ENDVAR
{:
    // Crea un VarDeclNode con la lista di dichiarazioni
    VarDeclNode varDeclNode = new VarDeclNode((List<DeclNode>) decls);
    RESULT = varDeclNode;
:};

/* Dichiarazioni e costanti */
Decls ::= Ids:ids COLON Type:type SEMI Decls:nextDecls
{:
    // Crea un DeclNode per questa dichiarazione
    DeclNode declNode = new DeclNode(
        (List<String>) ids,
        (Type) type,
        null // Nessuna costante
    );
    // Aggiungi questa dichiarazione alla lista
    List<DeclNode> decls = new ArrayList<>();
    decls.add(declNode);
    // Aggiungi le dichiarazioni successive
    decls.addAll((List<DeclNode>) nextDecls);
    RESULT = decls;
:}
| Ids:ids ASSIGN Consts:consts SEMI Decls:nextDecls
{:
    // Crea un DeclNode per questa dichiarazione con costanti
    DeclNode declNode = new DeclNode(
        (List<String>) ids,
        null, // Nessun tipo specificato
        (List<ConstNode>) consts
    );
    // Aggiungi questa dichiarazione alla lista
    List<DeclNode> decls = new ArrayList<>();
    decls.add(declNode);
    // Aggiungi le dichiarazioni successive
    decls.addAll((List<DeclNode>) nextDecls);
    RESULT = decls;
:}
| Ids:ids COLON Type:type SEMI
{:
    // Crea un DeclNode per questa dichiarazione
    DeclNode declNode = new DeclNode(
        (List<String>) ids,
        (Type) type,
        null // Nessuna costante
    );
    // Crea una lista con questa dichiarazione
    List<DeclNode> decls = new ArrayList<>();
    decls.add(declNode);
    RESULT = decls;
:}
| Ids:ids ASSIGN Consts:consts SEMI
{:
    // Crea un DeclNode per questa dichiarazione con costanti
    DeclNode declNode = new DeclNode(
        (List<String>) ids,
        null, // Nessun tipo specificato
        (List<ConstNode>) consts
    );
    // Crea una lista con questa dichiarazione
    List<DeclNode> decls = new ArrayList<>();
    decls.add(declNode);
    RESULT = decls;
:};

/* Lista di identificatori */
Ids ::= IDENTIFIER:id COMMA Ids:nextIds
{:
    // Crea una lista di identificatori
    List<String> ids = new ArrayList<>();
    ids.add((String) id);
    ids.addAll((List<String>) nextIds);
    RESULT = ids;
:}
| IDENTIFIER:id
{:
    // Crea una lista con questo identificatore
    List<String> ids = new ArrayList<>();
    ids.add((String) id);
    RESULT = ids;
:};

/* Lista di costanti */
Consts ::= Const:constant COMMA Consts:nextConsts
{:
    // Crea una lista di costanti
    List<ConstNode> consts = new ArrayList<>();
    consts.add((ConstNode) constant);
    consts.addAll((List<ConstNode>) nextConsts);
    RESULT = consts;
:}
| Const:constant
{:
    // Crea una lista con questa costante
    List<ConstNode> consts = new ArrayList<>();
    consts.add((ConstNode) constant);
    RESULT = consts;
:};

/* Definizione di una costante */
Const ::= REAL_CONST:realConst
{:
    ConstNode constNode = new ConstNode(Double.parseDouble((String) realConst), Type.REAL);
    RESULT = constNode;
:}
| NUMBER_LITERAL:number
{:
    ConstNode constNode = new ConstNode(Integer.parseInt((String) number), Type.INTEGER);
    RESULT = constNode;
:}
| STRING_LITERAL:stringLiteral
{:
    ConstNode constNode = new ConstNode((String) stringLiteral, Type.STRING);
    RESULT = constNode;
:}
| TRUE
{:
    ConstNode constNode = new ConstNode(true, Type.BOOLEAN);
    RESULT = constNode;
:}
| FALSE
{:
    ConstNode constNode = new ConstNode(false, Type.BOOLEAN);
    RESULT = constNode;
:};

/* Definizione di un tipo */
Type ::= REAL
{:
    RESULT = Type.REAL;
:}
| INTEGER
{:
    RESULT = Type.INTEGER;
:}
| STRING
{:
    RESULT = Type.STRING;
:}
| BOOLEAN
{:
    RESULT = Type.BOOLEAN;
:};

/* Definizione di una funzione */
Function ::= FUNC IDENTIFIER:funcName LPAR FuncParams:params RPAR TYPERETURN Types:returnType COLON Body:body ENDFUNC
{:
    // Crea un FunctionNode con i componenti analizzati
    FunctionNode functionNode = new FunctionNode(
        (String) funcName,
        (FuncParamsNode) params,
        (List<Type>) returnType,
        (BodyNode) body
    );
    RESULT = functionNode;
:};

/* Parametri di una funzione */
FuncParams ::= IDENTIFIER:id COLON Type:type OtherFuncParams:otherParams
{:
    // Crea una lista di parametri iniziando con questo
    List<ParamNode> params = new ArrayList<>();
    ParamNode paramNode = new ParamNode((String) id, (Type) type);
    params.add(paramNode);
    params.addAll((List<ParamNode>) otherParams);
    FuncParamsNode funcParamsNode = new FuncParamsNode(params);
    RESULT = funcParamsNode;
:}
| /* empty */
{:
    // Nessun parametro
    FuncParamsNode funcParamsNode = new FuncParamsNode(new ArrayList<>());
    RESULT = funcParamsNode;
:};

/* Altri parametri di una funzione */
OtherFuncParams ::= COMMA IDENTIFIER:id COLON Type:type OtherFuncParams:otherParams
{:
    // Crea una lista di parametri aggiuntivi
    List<ParamNode> params = new ArrayList<>();
    ParamNode paramNode = new ParamNode((String) id, (Type) type);
    params.add(paramNode);
    params.addAll((List<ParamNode>) otherParams);
    RESULT = params;
:}
| /* empty */
{:
    // Nessun altro parametro
    RESULT = new ArrayList<ParamNode>();
:};

/* Definizione di una lista di tipi */
Types ::= Type:type COMMA Types:nextTypes
{:
    // Crea una lista di tipi di ritorno
    List<Type> types = new ArrayList<>();
    types.add((Type) type);
    types.addAll((List<Type>) nextTypes);
    RESULT = types;
:}
| Type:type
{:
    // Crea una lista con un singolo tipo di ritorno
    List<Type> types = new ArrayList<>();
    types.add((Type) type);
    RESULT = types;
:};

/* procedura */
Procedure ::= PROC IDENTIFIER:id LPAR ProcParams:params RPAR COLON Body:body ENDPROC
{:
    // Crea un ProcedureNode con i componenti analizzati
    ProcedureNode procedureNode = new ProcedureNode(
        (String) id,
        (ProcParamsNode) params,
        (BodyNode) body
    );
    RESULT = procedureNode;
:};

/* Parametri di una procedura */
ProcParams ::= ProcParamId:paramId COLON Type:type OtherProcParams:otherParams
{:
    // Crea una lista di parametri iniziando con questo
    List<ProcParamNode> params = new ArrayList<>();
    ProcParamIdNode procParamIdNode = (ProcParamIdNode) paramId;
    ProcParamNode paramNode = new ProcParamNode(
        (String) procParamIdNode.name,
        (Type) type,
        procParamIdNode.isOut
    );
    params.add(paramNode);
    params.addAll((List<ProcParamNode>) otherParams);
    ProcParamsNode procParamsNode = new ProcParamsNode(params);
    RESULT = procParamsNode;
:}
| /* empty */
{:
    // Nessun parametro
    ProcParamsNode procParamsNode = new ProcParamsNode(new ArrayList<>());
    RESULT = procParamsNode;
:};

/* Altri parametri di una procedura */
OtherProcParams ::= COMMA ProcParamId:paramId COLON Type:type OtherProcParams:otherParams
{:
    // Crea una lista di parametri aggiuntivi
    List<ProcParamNode> params = new ArrayList<>();
    ProcParamIdNode procParamIdNode = (ProcParamIdNode) paramId;
    ProcParamNode paramNode = new ProcParamNode(
        (String) procParamIdNode.name,
        (Type) type,
        procParamIdNode.isOut
    );
    params.add(paramNode);
    params.addAll((List<ProcParamNode>) otherParams);
    RESULT = params;
:}
| /* empty */
{:
    // Nessun altro parametro
    RESULT = new ArrayList<ProcParamNode>();
:};

/* Definizione di un parametro di procedura */
ProcParamId ::= IDENTIFIER:identifier
{:
    // Parametro normale
    ProcParamIdNode paramIdNode = new ProcParamIdNode((String) identifier, false);
    RESULT = paramIdNode;
:}
| OUT IDENTIFIER:identifier
{:
    // Parametro OUT
    ProcParamIdNode paramIdNode = new ProcParamIdNode((String) identifier, true);
    RESULT = paramIdNode;
:};

/* Definizione del corpo di una funzione o procedura */
Body ::= VarDecl:varDecl Body:nextBody
{:
    BodyNode bodyNode = (BodyNode) nextBody;
    if (bodyNode == null) {
        bodyNode = new BodyNode(new ArrayList<>());
    }
    bodyNode.getStatements().add(0, (VarDeclNode) varDecl);
    RESULT = bodyNode;
:}
| Stat:stat Body:nextBody
{:
    BodyNode bodyNode = (BodyNode) nextBody;
    if (bodyNode == null) {
        bodyNode = new BodyNode(new ArrayList<>());
    }
    bodyNode.getStatements().add(0, (StatNode) stat);
    RESULT = bodyNode;
:}
| /* empty */
{:
    RESULT = new BodyNode(new ArrayList<>());
:};

/* Dichiarazione delle istruzioni */
Stat ::= Ids:ids ASSIGN Exprs:exprs SEMI
{:
    StatNode statNode = new AssignStatNode((List<String>) ids, (List<ExprNode>) exprs);
    RESULT = statNode;
:}
| ProcCall:procCall SEMI
{:
    StatNode statNode = new ProcCallStatNode((ProcCallNode) procCall);
    RESULT = statNode;
:}
| RETURN Exprs:exprs SEMI
{:
    StatNode statNode = new ReturnStatNode((List<ExprNode>) exprs);
    RESULT = statNode;
:}
| WRITE IOArgsList:ioArgsList SEMI
{:
    StatNode statNode = new WriteStatNode((List<IOArgNode>) ioArgsList);
    RESULT = statNode;
:}
| WRITERETURN IOArgsList:ioArgsList SEMI
{:
    StatNode statNode = new WriteReturnStatNode((List<IOArgNode>) ioArgsList);
    RESULT = statNode;
:}
| READ IOArgsList:ioArgsList SEMI
{:
    StatNode statNode = new ReadStatNode((List<IOArgNode>) ioArgsList);
    RESULT = statNode;
:}
| IfStat:ifStat SEMI
{:
    StatNode statNode = (IfStatNode) ifStat;
    RESULT = statNode;
:}
| WhileStat:whileStat SEMI
{:
    StatNode statNode = (WhileStatNode) whileStat;
    RESULT = statNode;
:};


/* Chiamate a funzione */
FunCall ::= IDENTIFIER:funcName LPAR Exprs:args RPAR
{:
    FunCallNode funCallNode = new FunCallNode((String) funcName, (List<ExprNode>) args);
    RESULT = funCallNode;
:}
| IDENTIFIER:funcName LPAR RPAR
{:
    FunCallNode funCallNode = new FunCallNode((String) funcName, new ArrayList<>());
    RESULT = funCallNode;
:};

/* Chiamate a procedura */
ProcCall ::= IDENTIFIER:procName LPAR ProcExprs:args RPAR
{:
    ProcCallNode procCallNode = new ProcCallNode((String) procName, (List<ProcExprNode>) args);
    RESULT = procCallNode;
:}
| IDENTIFIER:procName LPAR RPAR
{:
    ProcCallNode procCallNode = new ProcCallNode((String) procName, new ArrayList<>());
    RESULT = procCallNode;
:};

/* Definizione delle istruzioni condizionali */
IfStat ::= IF Expr:condition THEN Body:thenBody Elifs:elifBlocks Else:elseBlock ENDIF
{:
    IfStatNode ifStatNode = new IfStatNode(
        (ExprNode) condition,
        (BodyNode) thenBody,
        (List<ElifNode>) elifBlocks,
        (ElseNode) elseBlock
    );
    RESULT = ifStatNode;
:};

/* Liste di condizioni ELIF */
Elifs ::= Elif:elifBlock Elifs:nextElifs
{:
    List<ElifNode> elifs = new ArrayList<>();
    elifs.add((ElifNode) elifBlock);
    elifs.addAll((List<ElifNode>) nextElifs);
    RESULT = elifs;
:}
| /* empty */
{:
    RESULT = new ArrayList<ElifNode>();
:};

/* Condizione ELIF */
Elif ::= ELIF Expr:condition THEN Body:body
{:
    ElifNode elifNode = new ElifNode((ExprNode) condition, (BodyNode) body);
    RESULT = elifNode;
:};

/* Condizione ELSE */
Else ::= ELSE Body:body
{:
    ElseNode elseNode = new ElseNode((BodyNode) body);
    RESULT = elseNode;
:}
| /* empty */
{:
    RESULT = null;  // Nessun blocco else
:};

/* Definizione delle istruzioni di loop */
WhileStat ::= WHILE Expr:condition DO Body:body ENDWHILE
{:
    WhileStatNode whileStatNode = new WhileStatNode((ExprNode) condition, (BodyNode) body);
    RESULT = whileStatNode;
:};

/* Argomenti di Input/Output */
IOArgsList ::= IOArg:arg IOArgsList:nextArgs
{:
    List<IOArgNode> argsList = new ArrayList<>();
    argsList.add((IOArgNode) arg);
    argsList.addAll((List<IOArgNode>) nextArgs);
    RESULT = argsList;
:}
| DOLLAR LPAR Expr:expr RPAR IOArgsList:nextArgs
{:
    IOArgNode argNode = new DollarExprNode((ExprNode) expr);
    List<IOArgNode> argsList = new ArrayList<>();
    argsList.add(argNode);
    argsList.addAll((List<IOArgNode>) nextArgs);
    RESULT = argsList;
:}
| /* empty */
{:
    RESULT = new ArrayList<IOArgNode>();
:};

/* Singolo argomento di I/O */
IOArg ::= IOArg:l PLUS IOArg:r
{:
    IOArgNode ioArgNode = new IOArgBinaryNode((IOArgNode) l, (IOArgNode) r, "+");
    RESULT = ioArgNode;
:}
| IDENTIFIER:id
{:
    IOArgNode ioArgNode = new IOArgIdentifierNode((String) id);
    RESULT = ioArgNode;
:}
| STRING_LITERAL:literal
{:
    IOArgNode ioArgNode = new IOArgStringLiteralNode((String) literal);
    RESULT = ioArgNode;
:};

/* Parametri di espressioni per le procedure */
ProcExprs ::= Expr:expr COMMA ProcExprs:nextExprs
{:
    // Crea una lista di parametri di espressione
    List<ProcExprNode> exprs = new ArrayList<>();
    exprs.add(new ProcExprNode((ExprNode) expr, false));
    exprs.addAll((Collection<? extends ProcExprNode>) nextExprs);
    RESULT = exprs;
:}
| REF IDENTIFIER:id COMMA ProcExprs:nextExprs
{:
    // Crea una lista di parametri di riferimento
    List<ProcExprNode> exprs = new ArrayList<>();
    exprs.add(new ProcExprNode(new IdentifierNode((String) id), true));
    exprs.addAll((Collection<? extends ProcExprNode>) nextExprs);
    RESULT = exprs;
:}
| Expr:expr
{:
    List<ProcExprNode> exprs = new ArrayList<>();
    exprs.add(new ProcExprNode((ExprNode) expr, false));
    RESULT = exprs;
:}
| REF IDENTIFIER:id
{:
    List<ProcExprNode> exprs = new ArrayList<>();
    exprs.add(new ProcExprNode(new IdentifierNode((String) id), true));
    RESULT = exprs;
:};

/* Lista di espressioni */
Exprs ::= Expr:expr COMMA Exprs:nextExprs
{:
    // Crea una lista di espressioni
    List<ExprNode> exprs = new ArrayList<>();
    exprs.add((ExprNode) expr);
    exprs.addAll((Collection<? extends ExprNode>) nextExprs);
    RESULT = exprs;
:}
| Expr:expr
{:
    List<ExprNode> exprs = new ArrayList<>();
    exprs.add((ExprNode) expr);
    RESULT = exprs;
:};

/* Definizione di espressioni */
Expr ::= FunCall:funCall
{:
    RESULT = funCall;
:}
| REAL_CONST:realConst
{:
    RESULT = new RealConstNode(Double.parseDouble((String) realConst), Type.REAL);
:}
| NUMBER_LITERAL:number
{:
    RESULT = new IntConstNode(Integer.parseInt((String) number), Type.INTEGER);
:}
| STRING_LITERAL:stringLiteral
{:
    RESULT = new StringConstNode((String) stringLiteral, Type.STRING);
:}
| IDENTIFIER:id
{:
    RESULT = new IdentifierNode((String) id);
:}
| TRUE
{:
    RESULT = new BooleanConstNode(true, Type.BOOLEAN);
:}
| FALSE
{:
    RESULT = new BooleanConstNode(false, Type.BOOLEAN);
:}
| Expr:l PLUS Expr:r
{:
    RESULT = new BinaryExprNode((ExprNode) l, (ExprNode) r, "+");
:}
| Expr:l MINUS Expr:r
{:
    RESULT = new BinaryExprNode((ExprNode) l, (ExprNode) r, "-");
:}
| Expr:l TIMES Expr:r
{:
    RESULT = new BinaryExprNode((ExprNode) l, (ExprNode) r, "*");
:}
| Expr:l DIV Expr:r
{:
    RESULT = new BinaryExprNode((ExprNode) l, (ExprNode) r, "/");
:}
| Expr:l AND Expr:r
{:
    RESULT = new BinaryExprNode((ExprNode) l, (ExprNode) r, "and");
:}
| Expr:l OR Expr:r
{:
    RESULT = new BinaryExprNode((ExprNode) l, (ExprNode) r, "or");
:}
| Expr:l GT Expr:r
{:
    RESULT = new BinaryExprNode((ExprNode) l, (ExprNode) r, ">");
:}
| Expr:l GE Expr:r
{:
    RESULT = new BinaryExprNode((ExprNode) l, (ExprNode) r, ">=");
:}
| Expr:l LT Expr:r
{:
    RESULT = new BinaryExprNode((ExprNode) l, (ExprNode) r, "<");
:}
| Expr:l LE Expr:r
{:
    RESULT = new BinaryExprNode((ExprNode) l, (ExprNode) r, "<=");
:}
| Expr:l EQ Expr:r
{:
    RESULT = new BinaryExprNode((ExprNode) l, (ExprNode) r, "=");
:}
| Expr:l NE Expr:r
{:
    RESULT = new BinaryExprNode((ExprNode) l, (ExprNode) r, "!=");
:}
| LPAR Expr:expr RPAR
{:
    RESULT = expr;
:}
| UMINUS Expr:expr
{:
    RESULT = new UnaryExprNode((ExprNode) expr, "uminus");
:}
| NOT Expr:expr
{:
    RESULT = new UnaryExprNode((ExprNode) expr, "not");
:};

